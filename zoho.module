<?php

/**
 * @file
 * The module that defined the callbacks to communicate with zoho crm.
 */

define('ZOHO_URL', 'http://crm.zoho.com/crm/private/xml/');
define('ZOHO_TICKET_URL', 'https://accounts.zoho.com/');

/**
 * Implements hook_menu().
 */
function zoho_menu() {
  $items = array();
  $items['admin/config/services/zoho'] = array(
    'title' => 'Zoho API Settings',
    'description' => 'Configure the settings for zoho.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('zoho_admin_settings_form'),
    'access arguments' => array('administer zoho api'),
    'weight' => -10,
  );
  $items['admin/config/services/zoho/settings'] = array(
    'title'  => 'Settings',
    'type'   => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  return $items;
}

/**
 * Menu callback for admin/config/zoho. Admin settings form.
 */
function zoho_admin_settings_form($form, &$form_state) {
  $form = array();
  $form['zoho_crm_authtoken'] = array(
    '#type' => 'textfield',
    '#title' => t('Zoho API Authtoken'),
    '#default_value' => variable_get('zoho_crm_authtoken', ''),
    '#description' => t('Enter a Valid API Authtoken. To use an existing Authtoken, login to zoho crm and goto ')
     . l(t('Existing tokens'), 'https://accounts.zoho.com/u/h#setting/authtoken', array('attributes' => array('target'=>'_blank')))
     . '<br/>' . t('OR') . '<br/>' . t('Leave this blank and enter your zoho crm username and password in the below fieldset to generate a new Authtoken.')
  );
  $form['zoho_credentials'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Generate new Authtoken'),
    '#collapsible' => TRUE,
    '#collapsed' => (variable_get('zoho_crm_authtoken', 0)),
    '#description' => t('Use this only if you need to generate a new Authtoken. And to generate a new token, the above Authtoken field should be empty.') . '<br/><strong>' . t('Username and password are NOT stored anywhere.') . '</strong>'
  );
  $form['zoho_credentials']['zoho_crm_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Zoho Username/Email'),
  );
  $form['zoho_credentials']['zoho_crm_pass'] = array(
    '#type' => 'password',
    '#title' => t('Zoho Password'),
  );
  $form['#validate'][] = 'zoho_validate_settings';
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Settings'),
  );
  return $form;
}

/**
 * Validate function for admin settings form.
 *
 */
function zoho_validate_settings($form, &$form_state) {
  if (($form_state['values']['zoho_crm_authtoken'] == '') && (($form_state['values']['zoho_crm_username'] == '') || ($form_state['values']['zoho_crm_pass'] == ''))) {
    form_set_error('', t('Please fill api Authtoken OR both Username & Password to generate a new Authtoken.'));
  }
}

/**
 * Submit function for admin settings form.
 *
 */
function zoho_admin_settings_form_submit($form, &$form_state) {
  // If Authtoken doesn't exist then generate new Authtoken.
  if (($form_state['values']['zoho_crm_authtoken'] == '') && (($form_state['values']['zoho_crm_username'] != '') && ($form_state['values']['zoho_crm_pass'] != ''))) {
    $result = _zoho_generate_authtoken($form_state['values']['zoho_crm_username'], $form_state['values']['zoho_crm_pass']);
    if (isset($result['authtoken'])) {
      drupal_set_message(t('Successfully generated a new Authtoken : ') . $result['authtoken']);
    }
    else {
      drupal_set_message(t('There was an error: :error.<br/>Please resolve the error and try again.', array(':error' => $result['error'])), 'error');
    }
  }
  elseif($form_state['values']['zoho_crm_authtoken'] != '') {
    //Update the Authtoken from the admin settings form.
    variable_set('zoho_crm_authtoken', $form_state['values']['zoho_crm_authtoken']);
  }
}

/**
 * Generates a new ZOHO Auth Token and stores in db.
 *
 * @param string $username
 *   User name of the Zoho crm account
 * @param string $pass
 *   Password for Zoho crm account
 * @returns array
 *   Returns an array with authtoken if success and error otherwise.
 */
function _zoho_generate_authtoken($username, $pass) {
  $url = ZOHO_TICKET_URL . "apiauthtoken/nb/create?SCOPE=ZohoCRM/crmapi&EMAIL_ID=" . $username . "&PASSWORD=" . $pass;
  $response = drupal_http_request($url, array('method' => 'POST', 'headers' => array('Content-Type' => 'application/x-www-form-urlencoded; charset=utf-8')));
  if($response->code == "200") {
    $result = $response->data;
    $anArray = explode("\n",$result);
    $authToken = explode("=",$anArray['2']);
    $cmp = strcmp($authToken['0'],"AUTHTOKEN");
    if ($cmp == 0)
      {
	variable_set('zoho_crm_authtoken', $authToken['1']);
	return array('authtoken' => $authToken['1']);
      }
    else {
      return array('error' => $authToken['1']);	
    }
  }
  else {
    return array('error' => $response->error);
  }
}

/**
 * Sending data to zoho crm.
 *
 * @param string $type
 *   Type of records to be added. e.g,'Leads'
 * @param string $xml
 *   The xml data to be stored in zoho crm.
 * @param string $update_id
 *   Optional-the Id of the record to be updated.
 *   If specified Updates the data already present in crm.
 *
 * @returns object
 *   Returns an object with following keys:
 *   success will contain TRUE/FALSE which determines if the request is succesfull or not.
 *   error will contain error code if the request was not successfull.
 *   message will contain success message or error message.
 *   records will contain an array with details of the inserted records if the request is successfull.
 */
function zoho_store_data_to_crm($type, $xml, $update_id = NULL) {
  $result = (object)array();
  $ticket = variable_get('zoho_crm_authtoken', FALSE);
  if(!$ticket) {
    $link = l(t('Zoho Configurations'), 'admin/config/services/zoho');
    watchdog('zoho', 'Zoho CRM Authtoken should be configured at admin > config > services > zoho', array(), WATCHDOG_ERROR, $link);
      $result->success = FALSE;
      $result->message = 'Zoho API is not configured.';
      return $result;
  }
  if (isset($update_id)) {
    $url = ZOHO_URL . $type . "/updateRecords?id=" . trim($update_id) . "&authtoken=" . trim($ticket) . "&scope=crmapi" . "&newFormat=1";
  }
  else {
    $url = ZOHO_URL . $type . "/insertRecords?authtoken=" . trim($ticket) . "&scope=crmapi" . "&newFormat=1";
  }
  $response = drupal_http_request($url, array('method' => 'POST', 'data' => $xml, 'headers' => array('Content-Type' => 'application/x-www-form-urlencoded; charset=utf-8')));
  if ($response->code == 200) {
    $xml = simplexml_load_string($response->data, 'SimpleXMLElement', LIBXML_NOCDATA);
    if (isset($xml->result)) {
      $result->success = TRUE;
      $result->message = (string)$xml->result->message;
      $record_details = array();
      foreach($xml->result->recorddetail->FL as $fl) {
	$key = (string)$fl['val'];
        $record_details[$key] = (string)$fl;
      }
      $result->records  = $record_details;
    } 
    else if (isset($xml->error)) {
      $result->success = FALSE;
      $result->message = (string)$xml->error->message;
      $result->error  = (string)$xml->error->code;
    }
  }
  else {
    $result->success = FALSE;
    $result->error = $response->code;
    $result->message = $response->error;
  }
  return $result;
}

/**
 * Getting data from zoho crm.
 *
 * @param string $search_condition
 *   Search condition based on which records will be fetched.
 *   e.g,'(Email|=|xyz@xyz.com)'
 * @param string $type
 *   Type of records to be fetched. e.g,'Leads'
 * @param string $select_columns
 *   Columns of the records to be fetched.
 *   e.g, 'Leads(First Name,Last Name,Email)'
 *
 * @returns object
 *   Returns an object with following keys:
 *   success will contain TRUE/FALSE which determines if the request is succesfull or not.
 *   error will contain error code if the request was not successfull.
 *   message will contain success message or error message.
 *   records will contain an associated array of records with data if the request is successfull.
 */
function zoho_get_records($search_condition, $type = 'Leads', $select_columns = 'All') {
  $result = (object)array();
  $ticket = variable_get('zoho_crm_authtoken', FALSE);
  if(!$ticket) {
    $link = l(t('Zoho Configurations'), 'admin/config/services/zoho');
    watchdog('zoho', 'Zoho CRM Authtoken should be configured at admin > config > services > zoho', array(), WATCHDOG_ERROR, $link);
    $result->success = FALSE;
    $result->message = 'Zoho API is not configured.';
    return $result;
  }
  
  $params = '&scope=crmapi&selectColumns=' . urlencode($select_columns) . '&searchCondition=' . urlencode($search_condition);
  $url = ZOHO_URL . $type . "/getSearchRecords?authtoken=" . trim($ticket) . $params;
  $response = drupal_http_request($url);
  if ($response->code == 200) {
    $xml = simplexml_load_string($response->data, 'SimpleXMLElement', LIBXML_NOCDATA);
    if (isset($xml->result)) {
      $result->success = TRUE;
      $result->message = (string)$xml->result->message;
      $result->records = parse_records($xml, $type);
    } 
    else if (isset($xml->error)) {
      $result->success = FALSE;
      $result->message = (string)$xml->error->message;
      $result->error  = (string)$xml->error->code;
    }
  }
  else {
    $result->success = FALSE;
    $result->error = $response->code;
    $result->message = $response->error;
  }
  return $result;
}

/**
 * Parse xml object into an array
 *
 * @param object $xml
 *   An object of type simplexmlelement returned by simplexml_load_string().
 * @param string $type
 *   Type of records being fetched. e.g,'Leads'
 *
 * @returns array
 *   An associated array of records with fiekds and values.
 *   $records[row value][field value]
 */
function parse_records($xml, $type) {
  $numberOfRecords = count($xml->result->$type->row);
  $records = array();
  for ($i = 0; $i < $numberOfRecords; $i++) {
    $numberOfValues = count($xml->result->$type->row[$i]->FL);
    for ($j = 0; $j < $numberOfValues; $j++) {
      $field = (string) $xml->result->$type->row[$i]->FL[$j]['val'];
      $records[$i][$field] = (string) $xml->result->$type->row[$i]->FL[$j];
    }
  }
  return $records;
}

/**
 * Implements hook_permission().
 */
function zoho_permission() {
  return array(
    'administer zoho api' => array(
      'title' => t('Administer zoho api module'),
      'description' => t('Perform administration tasks for zoho api module.'),
    ),
  );
}